/* stylelint-disable */
/* stylelint-enable */
@import url("https://fonts.googleapis.com/css?family=Lato:300,400,900");
@import url("https://fonts.googleapis.com/css?family=Lato:300,400,900");
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  border: 0;
  font: inherit;
  font-size: 100%;
  margin: 0;
  padding: 0;
  vertical-align: baseline; }

html {
  line-height: 1; }

ol,
ul {
  list-style: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

caption,
th,
td {
  font-weight: normal;
  text-align: left;
  vertical-align: middle; }

q,
blockquote {
  quotes: none; }

q::before,
q::after,
blockquote::before,
blockquote::after {
  content: '';
  content: none; }

a img {
  border: none; }

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/* stylelint-disable */
/* stylelint-enable */
:root {
  font-size: 1em; }

body {
  color: #999;
  font-family: "Lato", -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", sans-serif;
  font-weight: 400;
  line-height: 1.5;
  text-rendering: optimizeLegibility; }

h1,
h2,
h3,
strong {
  font-weight: 700;
  margin: 0; }

h1 {
  font-size: 3em;
  line-height: 1;
  margin-bottom: 0.5em; }
  @media (max-width: 37.5em) {
    h1 {
      font-size: 1.5em;
      margin-bottom: 0.9em; } }

h2 {
  font-size: 2.25em;
  line-height: 1.333333333;
  margin-bottom: 0.666666666em; }
  @media (max-width: 37.5em) {
    h2 {
      font-size: 1.3125em;
      line-height: 1.142857142;
      margin-bottom: 1.142857142em; } }

h3 {
  font-size: 1.5em;
  line-height: 1;
  margin-bottom: 0.9em; }
  @media (max-width: 37.5em) {
    h3 {
      font-size: 1.125em;
      line-height: 1.333333333;
      margin-bottom: 1.333333333em; } }

p {
  font-size: 1em;
  margin-bottom: 1.5em; }
  @media (max-width: 37.5em) {
    p {
      font-size: 1em;
      line-height: 1.5em;
      margin-bottom: 1.45em; } }

em {
  font-weight: 700; }

html,
body {
  box-sizing: border-box; }

*,
*::before,
*::after {
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  box-sizing: inherit;
  -ms-touch-action: manipulation;
      touch-action: manipulation; }

a {
  text-decoration: none; }

img {
  max-width: 100%; }

/* stylelint-disable */
/* stylelint-enable */
.site-header {
  background: #f9f9f9;
  border-bottom: 0.0625rem solid #ddd;
  border-top: 0.3em solid #555;
  display: -ms-flexbox;
  display: flex;
  font-size: 1rem;
  margin-bottom: 3em;
  position: relative;
  z-index: 20; }

.site-logo {
  font-size: 2.9rem;
  line-height: 1.2;
  margin: 0;
  vertical-align: middle; }
  .site-logo-link {
    -ms-flex-align: center;
        align-items: center;
    background: #FE049A;
    color: #999;
    display: -ms-flexbox;
    display: flex;
    height: 100%;
    padding: 0.15em 0.2em 0;
    position: relative; }
    .site-logo-link::before {
      background: white;
      border-radius: 0.625rem;
      bottom: 0.1875rem;
      content: '';
      height: 0.375rem;
      left: 63%;
      position: absolute;
      transform: translateX(-50%);
      width: 31%; }
    .site-logo-link::after {
      background: #FE049A;
      content: '';
      height: 1rem;
      left: 0;
      position: absolute;
      top: 100%;
      width: 100%;
      z-index: 60; }
    .site-logo-link svg {
      width: 3.5rem; }
    .site-logo-link path {
      fill: #f9f9f9; }

.site-nav {
  height: 100%;
  margin: auto 0 auto auto; }

.site-nav-open {
  transform: translateX(4em);
  transition: 0.25s transform ease-out; }

.site-nav-list {
  display: -ms-flexbox;
  display: flex;
  height: 100%; }

.site-nav-sub-list {
  background: #f9f9f9;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  position: absolute;
  right: 0;
  top: 100%;
  visibility: hidden;
  width: 100%; }
  @media (min-width: 56.25em) {
    .site-nav-sub-list {
      display: inline-block;
      width: calc(100% + 4em); } }

.site-nav-sub-list-item {
  -ms-flex-preferred-size: 50%;
      flex-basis: 50%; }
  @media (min-width: 37.5em) {
    .site-nav-sub-list-item {
      -ms-flex-preferred-size: 33.33%;
          flex-basis: 33.33%; } }

.site-nav-list-item {
  display: inline-block;
  text-align: center;
  vertical-align: middle; }
  .site-nav-list-item:hover {
    background: #ededed; }
    .site-nav-list-item:hover .site-nav-sub-list {
      visibility: visible; }
  @media (min-width: 56.25em) {
    .site-nav-list-item {
      position: relative; } }

.site-nav-list-item-link {
  display: block;
  padding: 1em; }
  @media (min-width: 37.5625em) {
    .site-nav-list-item-link {
      padding: 1em 1.75em; } }
  .site-nav-list-item-link:hover {
    background: #ededed; }

.site-nav-sub-list-item-link {
  background: #ededed;
  display: block;
  padding: 1em; }
  .site-nav-sub-list-item-link:hover {
    background: #e6e6e6; }

.search {
  -ms-flex-align: center;
      align-items: center;
  display: -ms-flexbox;
  display: flex;
  margin-left: 1em;
  position: relative; }
  .search-input {
    border: 0.0625rem solid #e6e6e6;
    border-right: none;
    color: #999;
    height: 2.65em;
    padding-left: 0.5em;
    transform: translateX(0%);
    transition: transform  0.15s ease-in-out, background-color  0.15s ease, width  0.15s ease-in-out, border  0.15s ease-in-out;
    position: absolute;
    z-index: 10; }
    .search-input:focus {
      border: 0.0625rem solid #FE049A;
      border-right: none;
      outline: none;
      transition: transform  0.15s ease-in-out, background-color  0.15s ease, width  0.15s ease-in-out, border  0.15s ease-in-out, opacity 0.15s ease 0.05s; }
    @media (min-width: 39.375em) {
      .search-input {
        position: relative; } }
    @media (max-width: 39.375em) {
      .search-input {
        right: 100%; }
        .search-input:not(:focus) {
          background: transparent;
          opacity: 0;
          transform: translateX(100%);
          width: 2.625rem;
          z-index: 9999; } }
    .search-input:valid {
      background: #fff;
      border: 0.0625rem solid #FE049A;
      opacity: 1;
      transform: translateX(0%);
      width: auto; }
    .search-input:focus + .search-btn {
      background: #FE049A;
      border: 0.0625rem solid #FE049A; }
      .search-input:focus + .search-btn svg {
        fill: #fff; }
  .search-btn {
    background: #f9f9f9;
    border: 0.0625rem solid #e6e6e6;
    height: 2.65em;
    outline: none;
    position: relative;
    text-transform: uppercase;
    transition: background-color  0.15s ease-in-out, color  0.15s ease-in-out;
    z-index: 999; }
    .search-btn svg {
      fill: #FE049A; }

::-webkit-input-placeholder,
::-webkit-input-placeholder,
::-moz-placeholder,
:-ms-input-placeholder,
:-moz-placeholder {
  color: #FE049A; }

::placeholder,
::-webkit-input-placeholder,
::-moz-placeholder,
:-ms-input-placeholder,
:-moz-placeholder {
  color: #FE049A; }

/* stylelint-disable */
/* stylelint-enable */
.code {
  background: #222833;
  display: block;
  font-family: monospace;
  font-size: 1em;
  margin-bottom: 2em;
  overflow-x: auto;
  overflow-y: hidden;
  padding: 1em 1.5em 1em 0.5em; }
  .code-block {
    display: block; }
  .code-line {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-pack: start;
        justify-content: flex-start; }
  .code-line-number {
    text-align: right;
    padding-right: 1.25rem;
    display: inline-block;
    color: rgba(255, 255, 255, 0.2);
    min-width: 2.5rem;
    font-size: 1.1em; }

/* Technique to disable line numbers from being selected and copied.
   Checkout this post for more details http://codepen.io/danoc/pen/ByGKZv */
[data-pseudo-content]::before,
[data-pseudo-content--before]::before,
[data-pseudo-content--after]::after {
  content: attr(data-pseudo-content); }

:root {
  font-size: 99%;
  display: -ms-flexbox;
  display: flex; }

body {
  background: url(http://david-conner.com/images/heroBg.jpg) repeat;
  background-position: 50% 54%; }
  body::after {
    background: rgba(255, 255, 255, 0.4);
    content: '';
    height: 100%;
    left: 0;
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 0; }

html,
body {
  height: 100%;
  margin: 0;
  width: 100%;
  z-index: 100; }

a {
  color: #FE049A; }

.accent {
  color: #FE049A;
  font-size: 60%;
  padding: 0.5em;
  text-transform: uppercase; }

.wrap {
  display: -ms-flexbox;
  display: flex;
  min-height: 100%;
  margin: 0 auto;
  max-width: 50rem;
  padding: 0 1em;
  width: 100%;
  z-index: 10; }
  .wrap-main {
    -ms-flex-direction: column;
        flex-direction: column;
    max-width: 100%;
    overflow-x: hidden;
    padding: 0; }
  .wrap-head {
    padding-left: 0; }
    @media (min-width: 37.5em) {
      .wrap-head {
        padding-left: 1em; } }
    @media (min-width: 61.875em) {
      .wrap-head {
        max-width: 80vw; } }
  .wrap-body {
    -ms-flex: 2;
        flex: 2;
    -ms-flex-direction: column;
        flex-direction: column;
    padding-bottom: 3em; }
  .wrap-footer {
    -ms-flex-pack: justify;
        justify-content: space-between; }
    @media (min-width: 61.875em) {
      .wrap-footer {
        max-width: 80vw; } }

.post-list-item {
  margin-bottom: 3rem; }

.post-link {
  display: block;
  overflow: hidden; }

.post-date {
  color: #999;
  display: block;
  margin-bottom: 0.25em; }

.post-header {
  color: #999;
  margin-bottom: 0.25em; }

.post-description {
  color: #999;
  margin-bottom: 1.85em; }

.post-more {
  margin-left: 1em; }

.post-tags-list {
  display: -ms-flexbox;
  display: flex; }

.post-tags-list li {
  display: -ms-flexbox;
  display: flex; }
  .post-tags-list li + li {
    margin-left: 0.5em; }

.post-tags {
  background: #f9f9f9;
  border: 0.0625rem solid #ddd;
  border-radius: 0.15em;
  display: block;
  padding: 0.15em 1em; }
  .post-tags:hover {
    background: #ededed; }

.pagination {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
      justify-content: center; }
  .pagination li + li {
    margin-left: 1em; }
  .pagination-link_active {
    border-bottom: 0.0625rem solid; }

.site-footer {
  background: #f9f9f9;
  border-top: 0.0625rem solid #ddd;
  padding: 2em 0;
  position: relative;
  width: 100%;
  z-index: 10; }
  .site-footer-widget {
    -ms-flex-preferred-size: calc(100%/3);
        flex-basis: calc(100%/3); }

.widget-social {
  -ms-flex-item-align: center;
      -ms-grid-row-align: center;
      align-self: center;
  -ms-flex-preferred-size: auto;
      flex-basis: auto; }

.widget-social-link {
  -ms-flex-align: center;
      align-items: center;
  display: -ms-flexbox;
  display: flex;
  margin-bottom: 0.75em; }
  .widget-social-link * + * {
    line-height: 1;
    margin-left: 0.25em; }

.widget-biz-header {
  margin-bottom: 0.5em; }

.widget-biz-text {
  margin-bottom: 0.15em; }
/*# sourceMappingURL=data:application/json;base64, */